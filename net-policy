#!/usr/bin/env python

import os
import sys
import struct
import syslog
import socket
import pwd, grp
from subprocess import Popen, PIPE

# sys.argv = [
#  [0] : '/etc/openvpn/net-policy/net-policy',
#  [1] : '/tmp/openvpn_cc_b0a78a9c69679c3c430d874c2e034293.tmp'
# ]
# os.environ = {
#   'untrusted_ip': '172.31.170.1',         # client's real address
#   'untrusted_port': '43023',
#   'trusted_ip': '172.31.170.1',
#   'trusted_port': '43023',
#   'ifconfig_pool_remote_ip': '10.1.1.2',  # client's VPN address
#   'ifconfig_pool_netmask': '255.255.255.0',
#   'ifconfig_broadcast': '10.1.1.255',
#   'ifconfig_netmask': '255.255.255.0',
#   'ifconfig_local': '10.1.1.1',
#   'proto_1': 'udp',
#   'remote_port_1': '1194',
#   'local_port_1': '1194',
#   'dev': 'tun0',
#   'tun_mtu': '1500',
#   'link_mtu': '1541',
#   'common_name': 'test.user',             # client's cert name
#   'daemon_start_time': '1354594330',
#   'time_unix': '1354594343',
#   'time_ascii': 'Tue Dec  4 17:12:23 2012',
#   'script_context': 'init',
#   'script_type': 'client-connect',
#   'username': 'test.user',                # client's user name
#   'auth_control_file': '/tmp/openvpn_acf_39cebc0d6f0d3fe04bdc3ddc18d45aef.tmp',
# }

config_file = "/etc/openvpn/net-policy/net-policy.conf"

# Workflow:
# - set username = os.environ['common_name']
# - look up all groups for username
# - for each group:
#   - get list of networks from net-policy.rules
#   - emit 'push "route $netobject.dstnet $netobject.dstmask"' to sys.argv[1]
# - exit

def debug(message):
    syslog.syslog("DEBUG: %s" % message)
    if sys.stdout.isatty():
        print("# DEBUG: %s" % message)

def fatal(message, exitcode = 1):
    syslog.syslog("FATAL: %s" % message)
    sys.stderr.write("FATAL: %s\n" % message)
    sys.exit(exitcode)

def prefix_to_netmask_v4(prefix):
    # Functional prefix-length -> netmask convertor
    # E.g. 20 -> 255.255.240.0
    netmask_int = lambda x: (1L<<x)-1 << (32 - x)
    return ".".join(map(str, struct.unpack("4B", struct.pack('>I', netmask_int(int(prefix))))))

def read_ipset(set_name):
    addr_list = []
    p = Popen(["/usr/sbin/ipset", "-q", "list", set_name],
        shell=False, stdout=PIPE, stderr=PIPE, close_fds=True)
    for line in p.stderr:
        debug("ipset(err): " + line)
    for line in p.stdout:
        line = line.strip()
        # There are no spaces on the address lines
        if line.find(" ") >= 0:
            continue
        try:
            ipaddr, prefix = line.split("/")
        except:
            ipaddr = line
            prefix = None

        # See if it is IPv4 address...
        try:
            socket.inet_pton(socket.AF_INET, ipaddr)
            if not prefix:
                prefix = 32
            addr_list.append("%s %s" % (ipaddr, prefix_to_netmask_v4(prefix)))
            continue
        except socket.error:
            pass

        # See if it is IPv6 address...
        try:
            socket.inet_pton(socket.AF_INET6, ipaddr)
            if not prefix:
                prefix = 128
            addr_list.append("%s/%s" % (ipaddr, prefix))
            continue
        except socket.error:
            pass

    return addr_list
class conf(object):
    ipset_template = "pol-%(group)s-%(srcdst)s-v%(family)s"

class NetPolicy(object):
    def __init__(self, conf, username, remote_ipv4, remote_ipv6):
        self.conf = conf
        self.username = username
        self.remote_ipv4 = remote_ipv4
        self.remote_ipv6 = remote_ipv6
        self.group_list = self.fetch_group_list(self.username)

    def fetch_group_list(self, username):
        group_list = [g.gr_gid for g in grp.getgrall() if username in g.gr_mem]
        gid = pwd.getpwnam(username).pw_gid
        group_list.insert(0, grp.getgrgid(gid).gr_gid)
        return [grp.getgrgid(gid).gr_name for gid in group_list]

    def fetch_dst_addrs(self, group, family):
        set_name = self.conf.ipset_template % { 'group' : group, 'srcdst' : 'dst', 'family' : family }
        dst_addrs = read_ipset(set_name)
        debug("Addrs(%s, IPv%d): %s" % (group, family, dst_addrs))
        return dst_addrs

    def emit_openvpn(self, outfile):
        def _pushroute(family):
            addr_list = []
            for group in group_list:
                addr_list.extend(self.fetch_dst_addrs(group, family))
            for addr in addr_list:
                outfile.write('push "route %s"\n' % addr)

        group_list = self.fetch_group_list(os.environ['username'])
        debug("%s groups: %r" % (os.environ['username'], group_list))
        _pushroute(family = 4)
        _pushroute(family = 6)

    def emit_ipset(self):
        # Insert remote IP to src ipset
        pass

if __name__ == "__main__":
    try:
        syslog.openlog("net-policy", syslog.LOG_INFO | syslog.LOG_PID)
    except:
        fatal("Unable to open syslog")

    #env_keys = os.environ.keys()
    #env_keys.sort()
    #for key in env_keys:
    #    debug("env[%s] = %s" % (key, os.environ[key]))

    # Temporary config-like handling.
    # We'll do better later.
    try:
        execfile(config_file)
    except:
        fatal("Failure reading config file: %s" % config_file)

    try:
        outfile = open(sys.argv[1], "w")
    except IndexError, e:
        outfile = sys.stdout
    except:
        fatal("Unable to open output file")

    np = NetPolicy(conf, username = os.environ['username'],
                remote_ipv4 = os.environ['ifconfig_pool_remote_ip'],
                remote_ipv6 = os.environ.get('ifconfig_ipv6_remote', None))
    np.emit_openvpn(outfile)

    outfile.close()

